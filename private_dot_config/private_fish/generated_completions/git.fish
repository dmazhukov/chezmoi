complete -f -c git -n __fish_use_subcommand -a add -d 'Add file contents to the index'
complete -c git -n '__fish_seen_subcommand_from add' -s n -l dry-run -d 'dry run'
complete -c git -n '__fish_seen_subcommand_from add' -s v -l verbose -d 'be verbose'
complete -c git -n '__fish_seen_subcommand_from add' -s i -l interactive -d 'interactive picking'
complete -c git -n '__fish_seen_subcommand_from add' -s p -l patch -d 'select hunks interactively'
complete -c git -n '__fish_seen_subcommand_from add' -s e -l edit -d 'edit current diff and apply'
complete -c git -n '__fish_seen_subcommand_from add' -s f -l force -d 'allow adding otherwise ignored files'
complete -c git -n '__fish_seen_subcommand_from add' -s u -l update -d 'update tracked files'
complete -c git -n '__fish_seen_subcommand_from add' -l renormalize -d 'renormalize EOL of tracked files (implies -u)'
complete -c git -n '__fish_seen_subcommand_from add' -s N -l intent-to-add -d 'record only the fact that the path will be added later'
complete -c git -n '__fish_seen_subcommand_from add' -s A -l all -d 'add changes from all tracked and untracked files'
complete -c git -n '__fish_seen_subcommand_from add' -l ignore-removal -d 'ignore paths removed in the working tree (same as --no-all)'
complete -c git -n '__fish_seen_subcommand_from add' -l refresh -d don\'t\ add,\ only\ refresh\ the\ index
complete -c git -n '__fish_seen_subcommand_from add' -l ignore-errors -d 'just skip files which cannot be added because of errors'
complete -c git -n '__fish_seen_subcommand_from add' -l ignore-missing -d 'check if - even missing - files are ignored in dry run'
complete -c git -n '__fish_seen_subcommand_from add' -l chmod -d '(+|-)x        override the executable bit of the listed files'
complete -f -c git -n __fish_use_subcommand -a am -d 'Apply a series of patches from a mailbox'
complete -c git -n '__fish_seen_subcommand_from am' -s i -l interactive -d 'run interactively'
complete -c git -n '__fish_seen_subcommand_from am' -s 3 -l 3way -d 'allow fall back on 3way merging if needed'
complete -c git -n '__fish_seen_subcommand_from am' -s q -l quiet -d 'be quiet'
complete -c git -n '__fish_seen_subcommand_from am' -s s -l signoff -d 'add a Signed-off-by line to the commit message'
complete -c git -n '__fish_seen_subcommand_from am' -s u -l utf8 -d 'recode into utf8 (default)'
complete -c git -n '__fish_seen_subcommand_from am' -s k -l keep -d 'pass -k flag to git-mailinfo'
complete -c git -n '__fish_seen_subcommand_from am' -l keep-non-patch -d 'pass -b flag to git-mailinfo'
complete -c git -n '__fish_seen_subcommand_from am' -s m -l message-id -d 'pass -m flag to git-mailinfo'
complete -c git -n '__fish_seen_subcommand_from am' -l keep-cr -d 'pass --keep-cr flag to git-mailsplit for mbox format'
complete -c git -n '__fish_seen_subcommand_from am' -l no-keep-cr -d 'do not pass --keep-cr flag to git-mailsplit independent of am.keepcr'
complete -c git -n '__fish_seen_subcommand_from am' -s c -l scissors -d 'strip everything before a scissors line'
complete -c git -n '__fish_seen_subcommand_from am' -l whitespace -d '<action>'
complete -c git -n '__fish_seen_subcommand_from am' -l ignore-whitespace -d 'pass it through git-apply'
complete -c git -n '__fish_seen_subcommand_from am' -l directory -d '<root>    pass it through git-apply'
complete -c git -n '__fish_seen_subcommand_from am' -l exclude -d '<path>      pass it through git-apply'
complete -c git -n '__fish_seen_subcommand_from am' -l include -d '<path>      pass it through git-apply'
complete -c git -n '__fish_seen_subcommand_from am' -s C -d '<n>                pass it through git-apply'
complete -c git -n '__fish_seen_subcommand_from am' -s p -d '<num>              pass it through git-apply'
complete -c git -n '__fish_seen_subcommand_from am' -l patch-format -d '<format>'
complete -c git -n '__fish_seen_subcommand_from am' -l reject -d 'pass it through git-apply'
complete -c git -n '__fish_seen_subcommand_from am' -l resolvemsg -d '...      override error message when patch failure occurs'
complete -c git -n '__fish_seen_subcommand_from am' -l continue -d 'continue applying patches after resolving a conflict'
complete -c git -n '__fish_seen_subcommand_from am' -s r -l resolved -d 'synonyms for --continue'
complete -c git -n '__fish_seen_subcommand_from am' -l skip -d 'skip the current patch'
complete -c git -n '__fish_seen_subcommand_from am' -l abort -d 'restore the original branch and abort the patching operation.'
complete -c git -n '__fish_seen_subcommand_from am' -l quit -d 'abort the patching operation but keep HEAD where it is.'
complete -c git -n '__fish_seen_subcommand_from am' -l show-current-patch -d 'show the patch being applied.'
complete -c git -n '__fish_seen_subcommand_from am' -l ignore-date -d 'use current timestamp for author date'
complete -c git -n '__fish_seen_subcommand_from am' -l rerere-autoupdate -d 'update the index with reused conflict resolution if possible'
complete -f -c git -n __fish_use_subcommand -a archive -d 'Create an archive of files from a named tree'
complete -c git -n '__fish_seen_subcommand_from archive' -l format -d '<fmt>        archive format'
complete -c git -n '__fish_seen_subcommand_from archive' -l prefix -d '<prefix>     prepend prefix to each pathname in the archive'
complete -c git -n '__fish_seen_subcommand_from archive' -s o -l output -d '<file>   write the archive to this file'
complete -c git -n '__fish_seen_subcommand_from archive' -s v -l verbose -d 'report archived files on stderr'
complete -c git -n '__fish_seen_subcommand_from archive' -s 0 -d 'store only'
complete -c git -n '__fish_seen_subcommand_from archive' -s 1 -d 'compress faster'
complete -c git -n '__fish_seen_subcommand_from archive' -s 9 -d 'compress better'
complete -c git -n '__fish_seen_subcommand_from archive' -s l -l list -d 'list supported archive formats'
complete -c git -n '__fish_seen_subcommand_from archive' -l remote -d '<repo>       retrieve the archive from remote repository <repo>'
complete -c git -n '__fish_seen_subcommand_from archive' -l exec -d '<command>      path to the remote git-upload-archive command'
complete -f -c git -n __fish_use_subcommand -a bisect -d 'Use binary search to find the commit that introduced a bug'
complete -f -c git -n __fish_use_subcommand -a branch -d 'List, create, or delete branches'
complete -f -c git -n __fish_use_subcommand -a bundle -d 'Move objects and refs by archive'
complete -f -c git -n __fish_use_subcommand -a checkout -d 'Switch branches or restore working tree files'
complete -c git -n '__fish_seen_subcommand_from checkout' -s b -d '<branch>           create and checkout a new branch'
complete -c git -n '__fish_seen_subcommand_from checkout' -s B -d '<branch>           create/reset and checkout a branch'
complete -c git -n '__fish_seen_subcommand_from checkout' -s l -d 'create reflog for new branch'
complete -c git -n '__fish_seen_subcommand_from checkout' -l guess -d second\ guess\ \'git\ checkout\ \<no-such-branch\>\'\ \(default\)
complete -c git -n '__fish_seen_subcommand_from checkout' -l overlay -d 'use overlay mode (default)'
complete -c git -n '__fish_seen_subcommand_from checkout' -s q -l quiet -d 'suppress progress reporting'
complete -c git -n '__fish_seen_subcommand_from checkout' -l progress -d 'force progress reporting'
complete -c git -n '__fish_seen_subcommand_from checkout' -s m -l merge -d 'perform a 3-way merge with the new branch'
complete -c git -n '__fish_seen_subcommand_from checkout' -l conflict -d '<style>    conflict style (merge or diff3)'
complete -c git -n '__fish_seen_subcommand_from checkout' -s d -l detach -d 'detach HEAD at named commit'
complete -c git -n '__fish_seen_subcommand_from checkout' -s t -l track -d 'set upstream info for new branch'
complete -c git -n '__fish_seen_subcommand_from checkout' -s f -l force -d 'force checkout (throw away local modifications)'
complete -c git -n '__fish_seen_subcommand_from checkout' -l orphan -d '<new-branch>'
complete -c git -n '__fish_seen_subcommand_from checkout' -l overwrite-ignore -d 'update ignored files (default)'
complete -c git -n '__fish_seen_subcommand_from checkout' -s 2 -l ours -d 'checkout our version for unmerged files'
complete -c git -n '__fish_seen_subcommand_from checkout' -s 3 -l theirs -d 'checkout their version for unmerged files'
complete -c git -n '__fish_seen_subcommand_from checkout' -s p -l patch -d 'select hunks interactively'
complete -f -c git -n __fish_use_subcommand -a cherry-pick -d 'Apply the changes introduced by some existing commits'
complete -f -c git -n __fish_use_subcommand -a citool -d 'Graphical alternative to git-commit'
complete -f -c git -n __fish_use_subcommand -a clean -d 'Remove untracked files from the working tree'
complete -c git -n '__fish_seen_subcommand_from clean' -s q -l quiet -d 'do not print names of files removed'
complete -c git -n '__fish_seen_subcommand_from clean' -s n -l dry-run -d 'dry run'
complete -c git -n '__fish_seen_subcommand_from clean' -s f -l force -d force
complete -c git -n '__fish_seen_subcommand_from clean' -s i -l interactive -d 'interactive cleaning'
complete -c git -n '__fish_seen_subcommand_from clean' -s d -d 'remove whole directories'
complete -c git -n '__fish_seen_subcommand_from clean' -s e -l exclude -d '<pattern>'
complete -c git -n '__fish_seen_subcommand_from clean' -s x -d 'remove ignored files, too'
complete -c git -n '__fish_seen_subcommand_from clean' -s X -d 'remove only ignored files'
complete -f -c git -n __fish_use_subcommand -a clone -d 'Clone a repository into a new directory'
complete -c git -n '__fish_seen_subcommand_from clone' -s v -l verbose -d 'be more verbose'
complete -c git -n '__fish_seen_subcommand_from clone' -s q -l quiet -d 'be more quiet'
complete -c git -n '__fish_seen_subcommand_from clone' -l progress -d 'force progress reporting'
complete -c git -n '__fish_seen_subcommand_from clone' -s n -l no-checkout -d don\'t\ create\ a\ checkout
complete -c git -n '__fish_seen_subcommand_from clone' -l bare -d 'create a bare repository'
complete -c git -n '__fish_seen_subcommand_from clone' -l mirror -d 'create a mirror repository (implies bare)'
complete -c git -n '__fish_seen_subcommand_from clone' -s l -l local -d 'to clone from a local repository'
complete -c git -n '__fish_seen_subcommand_from clone' -l no-hardlinks -d don\'t\ use\ local\ hardlinks,\ always\ copy
complete -c git -n '__fish_seen_subcommand_from clone' -s s -l shared -d 'setup as shared repository'
complete -c git -n '__fish_seen_subcommand_from clone' -s j -l jobs -d '<n>        number of submodules cloned in parallel'
complete -c git -n '__fish_seen_subcommand_from clone' -l template -d '<template-directory>'
complete -c git -n '__fish_seen_subcommand_from clone' -l reference -d '<repo>    reference repository'
complete -c git -n '__fish_seen_subcommand_from clone' -l reference-if-able -d '<repo>'
complete -c git -n '__fish_seen_subcommand_from clone' -l dissociate -d 'use --reference only while cloning'
complete -c git -n '__fish_seen_subcommand_from clone' -s o -l origin -d \<name\>\ \ \ use\ \<name\>\ instead\ of\ \'origin\'\ to\ track\ upstream
complete -c git -n '__fish_seen_subcommand_from clone' -s b -l branch -d '<branch>'
complete -c git -n '__fish_seen_subcommand_from clone' -s u -l upload-pack -d '<path>'
complete -c git -n '__fish_seen_subcommand_from clone' -l depth -d '<depth>       create a shallow clone of that depth'
complete -c git -n '__fish_seen_subcommand_from clone' -l shallow-since -d '<time>'
complete -c git -n '__fish_seen_subcommand_from clone' -l shallow-exclude -d '<revision>'
complete -c git -n '__fish_seen_subcommand_from clone' -l single-branch -d 'clone only one branch, HEAD or --branch'
complete -c git -n '__fish_seen_subcommand_from clone' -l no-tags -d don\'t\ clone\ any\ tags,\ and\ make\ later\ fetches\ not\ to\ follow\ them
complete -c git -n '__fish_seen_subcommand_from clone' -l shallow-submodules -d 'any cloned submodules will be shallow'
complete -c git -n '__fish_seen_subcommand_from clone' -l separate-git-dir -d '<gitdir>'
complete -c git -n '__fish_seen_subcommand_from clone' -s c -l config -d '<key=value>'
complete -c git -n '__fish_seen_subcommand_from clone' -l server-option -d '<server-specific>'
complete -c git -n '__fish_seen_subcommand_from clone' -s 4 -l ipv4 -d 'use IPv4 addresses only'
complete -c git -n '__fish_seen_subcommand_from clone' -s 6 -l ipv6 -d 'use IPv6 addresses only'
complete -c git -n '__fish_seen_subcommand_from clone' -l filter -d '<args>       object filtering'
complete -c git -n '__fish_seen_subcommand_from clone' -l remote-submodules -d 'any cloned submodules will use their remote-tracking branch'
complete -f -c git -n __fish_use_subcommand -a commit -d 'Record changes to the repository'
complete -f -c git -n __fish_use_subcommand -a describe -d 'Give an object a human readable name based on an available ref'
complete -c git -n '__fish_seen_subcommand_from describe' -l contains -d 'find the tag that comes after the commit'
complete -c git -n '__fish_seen_subcommand_from describe' -l debug -d 'debug search strategy on stderr'
complete -c git -n '__fish_seen_subcommand_from describe' -l all -d 'use any ref'
complete -c git -n '__fish_seen_subcommand_from describe' -l tags -d 'use any tag, even unannotated'
complete -c git -n '__fish_seen_subcommand_from describe' -l long -d 'always use long format'
complete -c git -n '__fish_seen_subcommand_from describe' -l first-parent -d 'only follow first parent'
complete -c git -n '__fish_seen_subcommand_from describe' -l exact-match -d 'only output exact matches'
complete -c git -n '__fish_seen_subcommand_from describe' -l candidates -d '<n>      consider <n> most recent tags (default: 10)'
complete -c git -n '__fish_seen_subcommand_from describe' -l match -d '<pattern>     only consider tags matching <pattern>'
complete -c git -n '__fish_seen_subcommand_from describe' -l exclude -d '<pattern>   do not consider tags matching <pattern>'
complete -c git -n '__fish_seen_subcommand_from describe' -l always -d 'show abbreviated commit object as fallback'
complete -f -c git -n __fish_use_subcommand -a diff -d 'Show changes between commits, commit and working tree, etc'
complete -f -c git -n __fish_use_subcommand -a fetch -d 'Download objects and refs from another repository'
complete -f -c git -n __fish_use_subcommand -a format-patch -d 'Prepare patches for e-mail submission'
complete -f -c git -n __fish_use_subcommand -a gc -d 'Cleanup unnecessary files and optimize the local repository'
complete -c git -n '__fish_seen_subcommand_from gc' -s q -l quiet -d 'suppress progress reporting'
complete -c git -n '__fish_seen_subcommand_from gc' -l aggressive -d 'be more thorough (increased runtime)'
complete -c git -n '__fish_seen_subcommand_from gc' -l auto -d 'enable auto-gc mode'
complete -c git -n '__fish_seen_subcommand_from gc' -l force -d 'force running gc even if there may be another gc running'
complete -c git -n '__fish_seen_subcommand_from gc' -l keep-largest-pack -d 'repack all other packs except the largest pack'
complete -f -c git -n __fish_use_subcommand -a gitk -d 'The Git repository browser'
complete -f -c git -n __fish_use_subcommand -a grep -d 'Print lines matching a pattern'
complete -f -c git -n __fish_use_subcommand -a gui -d 'A portable graphical interface to Git'
complete -f -c git -n __fish_use_subcommand -a init -d 'Create an empty Git repository or reinitialize an existing one'
complete -c git -n '__fish_seen_subcommand_from init' -l template -d '<template-directory>'
complete -c git -n '__fish_seen_subcommand_from init' -l bare -d 'create a bare repository'
complete -c git -n '__fish_seen_subcommand_from init' -s q -l quiet -d 'be quiet'
complete -c git -n '__fish_seen_subcommand_from init' -l separate-git-dir -d '<gitdir>'
complete -f -c git -n __fish_use_subcommand -a log -d 'Show commit logs'
complete -f -c git -n __fish_use_subcommand -a merge -d 'Join two or more development histories together'
complete -c git -n '__fish_seen_subcommand_from merge' -s n -d 'do not show a diffstat at the end of the merge'
complete -c git -n '__fish_seen_subcommand_from merge' -l stat -d 'show a diffstat at the end of the merge'
complete -c git -n '__fish_seen_subcommand_from merge' -l summary -d '(synonym to --stat)'
complete -c git -n '__fish_seen_subcommand_from merge' -l squash -d 'create a single commit instead of doing a merge'
complete -c git -n '__fish_seen_subcommand_from merge' -l commit -d 'perform a commit if the merge succeeds (default)'
complete -c git -n '__fish_seen_subcommand_from merge' -s e -l edit -d 'edit message before committing'
complete -c git -n '__fish_seen_subcommand_from merge' -l cleanup -d '<mode>      how to strip spaces and #comments from message'
complete -c git -n '__fish_seen_subcommand_from merge' -l ff -d 'allow fast-forward (default)'
complete -c git -n '__fish_seen_subcommand_from merge' -l ff-only -d 'abort if fast-forward is not possible'
complete -c git -n '__fish_seen_subcommand_from merge' -l rerere-autoupdate -d 'update the index with reused conflict resolution if possible'
complete -c git -n '__fish_seen_subcommand_from merge' -l verify-signatures -d 'verify that the named commit has a valid GPG signature'
complete -c git -n '__fish_seen_subcommand_from merge' -s s -l strategy -d '<strategy>'
complete -c git -n '__fish_seen_subcommand_from merge' -s X -l strategy-option -d '<option=value>'
complete -c git -n '__fish_seen_subcommand_from merge' -s m -l message -d '<message>'
complete -c git -n '__fish_seen_subcommand_from merge' -s F -l file -d '<path>     read message from file'
complete -c git -n '__fish_seen_subcommand_from merge' -s v -l verbose -d 'be more verbose'
complete -c git -n '__fish_seen_subcommand_from merge' -s q -l quiet -d 'be more quiet'
complete -c git -n '__fish_seen_subcommand_from merge' -l abort -d 'abort the current in-progress merge'
complete -c git -n '__fish_seen_subcommand_from merge' -l quit -d '--abort but leave index and working tree alone'
complete -c git -n '__fish_seen_subcommand_from merge' -l continue -d 'continue the current in-progress merge'
complete -c git -n '__fish_seen_subcommand_from merge' -l progress -d 'force progress reporting'
complete -c git -n '__fish_seen_subcommand_from merge' -l overwrite-ignore -d 'update ignored files (default)'
complete -c git -n '__fish_seen_subcommand_from merge' -l signoff -d 'add Signed-off-by:'
complete -c git -n '__fish_seen_subcommand_from merge' -l verify -d 'verify commit-msg hook'
complete -f -c git -n __fish_use_subcommand -a mv -d 'Move or rename a file, a directory, or a symlink'
complete -c git -n '__fish_seen_subcommand_from mv' -s v -l verbose -d 'be verbose'
complete -c git -n '__fish_seen_subcommand_from mv' -s n -l dry-run -d 'dry run'
complete -c git -n '__fish_seen_subcommand_from mv' -s f -l force -d 'force move/rename even if target exists'
complete -c git -n '__fish_seen_subcommand_from mv' -s k -d 'skip move/rename errors'
complete -f -c git -n __fish_use_subcommand -a notes -d 'Add or inspect object notes'
complete -c git -n '__fish_seen_subcommand_from notes' -l ref -d '<notes-ref>     use notes from <notes-ref>'
complete -f -c git -n __fish_use_subcommand -a pull -d 'Fetch from and integrate with another repository or a local branch'
complete -f -c git -n __fish_use_subcommand -a push -d 'Update remote refs along with associated objects'
complete -c git -n '__fish_seen_subcommand_from push' -s v -l verbose -d 'be more verbose'
complete -c git -n '__fish_seen_subcommand_from push' -s q -l quiet -d 'be more quiet'
complete -c git -n '__fish_seen_subcommand_from push' -l repo -d '<repository>   repository'
complete -c git -n '__fish_seen_subcommand_from push' -l all -d 'push all refs'
complete -c git -n '__fish_seen_subcommand_from push' -l mirror -d 'mirror all refs'
complete -c git -n '__fish_seen_subcommand_from push' -s d -l delete -d 'delete refs'
complete -c git -n '__fish_seen_subcommand_from push' -l tags -d push\ tags\ \(can\'t\ be\ used\ with\ --all\ or\ --mirror\)
complete -c git -n '__fish_seen_subcommand_from push' -s n -l dry-run -d 'dry run'
complete -c git -n '__fish_seen_subcommand_from push' -l porcelain -d 'machine-readable output'
complete -c git -n '__fish_seen_subcommand_from push' -s f -l force -d 'force updates'
complete -c git -n '__fish_seen_subcommand_from push' -l thin -d 'use thin pack'
complete -c git -n '__fish_seen_subcommand_from push' -l receive-pack -d '<receive-pack>'
complete -c git -n '__fish_seen_subcommand_from push' -l exec -d '<receive-pack>'
complete -c git -n '__fish_seen_subcommand_from push' -s u -l set-upstream -d 'set upstream for git pull/status'
complete -c git -n '__fish_seen_subcommand_from push' -l progress -d 'force progress reporting'
complete -c git -n '__fish_seen_subcommand_from push' -l prune -d 'prune locally removed refs'
complete -c git -n '__fish_seen_subcommand_from push' -l no-verify -d 'bypass pre-push hook'
complete -c git -n '__fish_seen_subcommand_from push' -l follow-tags -d 'push missing but relevant tags'
complete -c git -n '__fish_seen_subcommand_from push' -l atomic -d 'request atomic transaction on remote side'
complete -c git -n '__fish_seen_subcommand_from push' -s o -l push-option -d '<server-specific>'
complete -c git -n '__fish_seen_subcommand_from push' -s 4 -l ipv4 -d 'use IPv4 addresses only'
complete -c git -n '__fish_seen_subcommand_from push' -s 6 -l ipv6 -d 'use IPv6 addresses only'
complete -f -c git -n __fish_use_subcommand -a range-diff -d 'Compare two commit ranges (e.g. two versions of a branch)'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l creation-factor -d '<n>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l no-dual-color -d 'use simple diff colors'
complete -c git -n '__fish_seen_subcommand_from range-diff' -s p -l patch -d 'generate patch'
complete -c git -n '__fish_seen_subcommand_from range-diff' -s s -l no-patch -d 'suppress diff output'
complete -c git -n '__fish_seen_subcommand_from range-diff' -s u -d 'generate patch'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l raw -d 'generate the diff in raw format'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l patch-with-raw -d synonym\ for\ \'-p\ --raw\'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l patch-with-stat -d synonym\ for\ \'-p\ --stat\'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l numstat -d 'machine friendly --stat'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l shortstat -d 'output only the last line of --stat'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l cumulative -d 'synonym for --dirstat=cumulative'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l check -d 'warn if changes introduce conflict markers or whitespace errors'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l summary -d 'condensed summary such as creations, renames and mode changes'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l name-only -d 'show only names of changed files'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l name-status -d 'show only names and status of changed files'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l stat-width -d '<width>  generate diffstat with a given width'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l stat-name-width -d '<width>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l stat-graph-width -d '<width>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l stat-count -d '<count>  generate diffstat with limited lines'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l compact-summary -d 'generate compact summary in diffstat'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l binary -d 'output a binary diff that can be applied'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l full-index -d 'show full pre- and post-image object names on the "index" lines'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l ws-error-highlight -d '<kind>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -s z -d 'do not munge pathnames and use NULs as output field terminators in --raw or --numstat'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l src-prefix -d '<prefix>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l dst-prefix -d '<prefix>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l line-prefix -d '<prefix>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l no-prefix -d 'do not show any source or destination prefix'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l inter-hunk-context -d '<n>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l output-indicator-new -d '<char>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l output-indicator-old -d '<char>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l output-indicator-context -d '<char>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l find-copies-harder -d 'use unmodified files as source to find copies'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l no-renames -d 'disable rename detection'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l rename-empty -d 'use empty blobs as rename source'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l follow -d 'continue listing the history of a file beyond renames'
complete -c git -n '__fish_seen_subcommand_from range-diff' -s l -d '<n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l minimal -d 'produce the smallest possible diff'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l ignore-cr-at-eol -d 'ignore carrier-return at the end of line'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l ignore-blank-lines -d 'ignore changes whose lines are all blank'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l indent-heuristic -d 'heuristic to shift diff hunk boundaries for easy reading'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l patience -d 'generate diff using the "patience diff" algorithm'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l histogram -d 'generate diff using the "histogram diff" algorithm'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l diff-algorithm -d '<algorithm>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l anchored -d '<text>     generate diff using the "anchored diff" algorithm'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l word-diff-regex -d '<regex>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l color-moved-ws -d '<mode>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -s a -l text -d 'treat all files as text'
complete -c git -n '__fish_seen_subcommand_from range-diff' -s R -d 'swap two inputs, reverse the diff'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l exit-code -d 'exit with 1 if there were differences, 0 otherwise'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l quiet -d 'disable all output of the program'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l ext-diff -d 'allow an external diff helper to be executed'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l textconv -d 'run external text conversion filters when comparing binary files'
complete -c git -n '__fish_seen_subcommand_from range-diff' -s S -d '<string>           look for differences that change the number of occurrences of the specified string'
complete -c git -n '__fish_seen_subcommand_from range-diff' -s G -d '<regex>            look for differences that change the number of occurrences of the specified regex'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l pickaxe-all -d 'show all changes in the changeset with -S or -G'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l pickaxe-regex -d 'treat <string> in -S as extended POSIX regular expression'
complete -c git -n '__fish_seen_subcommand_from range-diff' -s O -d '<file>             control the order in which files appear in the output'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l find-object -d '<object-id>'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l diff-filter -d '[(A|C|D|M|R|T|U|X|B)...[*]]'
complete -c git -n '__fish_seen_subcommand_from range-diff' -l output -d '<file>       Output to a specific file'
complete -f -c git -n __fish_use_subcommand -a rebase -d 'Reapply commits on top of another base tip'
complete -c git -n '__fish_seen_subcommand_from rebase' -l onto -d '<revision>     rebase onto given branch instead of upstream'
complete -c git -n '__fish_seen_subcommand_from rebase' -l no-verify -d 'allow pre-rebase hook to run'
complete -c git -n '__fish_seen_subcommand_from rebase' -s q -l quiet -d 'be quiet. implies --no-stat'
complete -c git -n '__fish_seen_subcommand_from rebase' -s v -l verbose -d 'display a diffstat of what changed upstream'
complete -c git -n '__fish_seen_subcommand_from rebase' -s n -l no-stat -d 'do not show diffstat of what changed upstream'
complete -c git -n '__fish_seen_subcommand_from rebase' -l signoff -d 'add a Signed-off-by: line to each commit'
complete -c git -n '__fish_seen_subcommand_from rebase' -l ignore-whitespace -d passed\ to\ \'git\ am\'
complete -c git -n '__fish_seen_subcommand_from rebase' -l ignore-date -d passed\ to\ \'git\ am\'
complete -c git -n '__fish_seen_subcommand_from rebase' -s C -d \<n\>\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ passed\ to\ \'git\ apply\'
complete -c git -n '__fish_seen_subcommand_from rebase' -l whitespace -d '<action>'
complete -c git -n '__fish_seen_subcommand_from rebase' -s f -l force-rebase -d 'cherry-pick all commits, even if unchanged'
complete -c git -n '__fish_seen_subcommand_from rebase' -l no-ff -d 'cherry-pick all commits, even if unchanged'
complete -c git -n '__fish_seen_subcommand_from rebase' -l continue -d continue
complete -c git -n '__fish_seen_subcommand_from rebase' -l skip -d 'skip current patch and continue'
complete -c git -n '__fish_seen_subcommand_from rebase' -l abort -d 'abort and check out the original branch'
complete -c git -n '__fish_seen_subcommand_from rebase' -l quit -d 'abort but keep HEAD where it is'
complete -c git -n '__fish_seen_subcommand_from rebase' -l edit-todo -d 'edit the todo list during an interactive rebase'
complete -c git -n '__fish_seen_subcommand_from rebase' -l show-current-patch -d 'show the patch file being applied or merged'
complete -c git -n '__fish_seen_subcommand_from rebase' -s m -l merge -d 'use merging strategies to rebase'
complete -c git -n '__fish_seen_subcommand_from rebase' -s i -l interactive -d 'let the user edit the list of commits to rebase'
complete -c git -n '__fish_seen_subcommand_from rebase' -l rerere-autoupdate -d 'update the index with reused conflict resolution if possible'
complete -c git -n '__fish_seen_subcommand_from rebase' -s k -l keep-empty -d 'preserve empty commits during rebase'
complete -c git -n '__fish_seen_subcommand_from rebase' -l autosquash -d 'move commits that begin with squash!/fixup! under -i'
complete -c git -n '__fish_seen_subcommand_from rebase' -l autostash -d 'automatically stash/stash pop before and after'
complete -c git -n '__fish_seen_subcommand_from rebase' -s x -l exec -d '<exec>     add exec lines after each commit of the editable list'
complete -c git -n '__fish_seen_subcommand_from rebase' -l fork-point -d use\ \'merge-base\ --fork-point\'\ to\ refine\ upstream
complete -c git -n '__fish_seen_subcommand_from rebase' -s s -l strategy -d '<strategy>'
complete -c git -n '__fish_seen_subcommand_from rebase' -s X -l strategy-option -d '<option>'
complete -c git -n '__fish_seen_subcommand_from rebase' -l root -d 'rebase all reachable commits up to the root(s)'
complete -f -c git -n __fish_use_subcommand -a reset -d 'Reset current HEAD to the specified state'
complete -c git -n '__fish_seen_subcommand_from reset' -s q -l quiet -d 'be quiet, only report errors'
complete -c git -n '__fish_seen_subcommand_from reset' -l mixed -d 'reset HEAD and index'
complete -c git -n '__fish_seen_subcommand_from reset' -l soft -d 'reset only HEAD'
complete -c git -n '__fish_seen_subcommand_from reset' -l hard -d 'reset HEAD, index and working tree'
complete -c git -n '__fish_seen_subcommand_from reset' -l merge -d 'reset HEAD, index and working tree'
complete -c git -n '__fish_seen_subcommand_from reset' -l keep -d 'reset HEAD but keep local changes'
complete -c git -n '__fish_seen_subcommand_from reset' -s p -l patch -d 'select hunks interactively'
complete -c git -n '__fish_seen_subcommand_from reset' -s N -l intent-to-add -d 'record only the fact that removed paths will be added later'
complete -f -c git -n __fish_use_subcommand -a restore -d 'Restore working tree files'
complete -c git -n '__fish_seen_subcommand_from restore' -s s -l source -d '<tree-ish>'
complete -c git -n '__fish_seen_subcommand_from restore' -s S -l staged -d 'restore the index'
complete -c git -n '__fish_seen_subcommand_from restore' -s W -l worktree -d 'restore the working tree (default)'
complete -c git -n '__fish_seen_subcommand_from restore' -l ignore-unmerged -d 'ignore unmerged entries'
complete -c git -n '__fish_seen_subcommand_from restore' -l overlay -d 'use overlay mode'
complete -c git -n '__fish_seen_subcommand_from restore' -s q -l quiet -d 'suppress progress reporting'
complete -c git -n '__fish_seen_subcommand_from restore' -l progress -d 'force progress reporting'
complete -c git -n '__fish_seen_subcommand_from restore' -s m -l merge -d 'perform a 3-way merge with the new branch'
complete -c git -n '__fish_seen_subcommand_from restore' -l conflict -d '<style>    conflict style (merge or diff3)'
complete -c git -n '__fish_seen_subcommand_from restore' -s 2 -l ours -d 'checkout our version for unmerged files'
complete -c git -n '__fish_seen_subcommand_from restore' -s 3 -l theirs -d 'checkout their version for unmerged files'
complete -c git -n '__fish_seen_subcommand_from restore' -s p -l patch -d 'select hunks interactively'
complete -f -c git -n __fish_use_subcommand -a revert -d 'Revert some existing commits'
complete -f -c git -n __fish_use_subcommand -a rm -d 'Remove files from the working tree and from the index'
complete -c git -n '__fish_seen_subcommand_from rm' -s n -l dry-run -d 'dry run'
complete -c git -n '__fish_seen_subcommand_from rm' -s q -l quiet -d 'do not list removed files'
complete -c git -n '__fish_seen_subcommand_from rm' -l cached -d 'only remove from the index'
complete -c git -n '__fish_seen_subcommand_from rm' -s f -l force -d 'override the up-to-date check'
complete -c git -n '__fish_seen_subcommand_from rm' -s r -d 'allow recursive removal'
complete -c git -n '__fish_seen_subcommand_from rm' -l ignore-unmatch -d 'exit with a zero status even if nothing matched'
complete -f -c git -n __fish_use_subcommand -a shortlog -d Summarize\ \'git\ log\'\ output
complete -f -c git -n __fish_use_subcommand -a show -d 'Show various types of objects'
complete -f -c git -n __fish_use_subcommand -a stash -d 'Stash the changes in a dirty working directory away'
complete -f -c git -n __fish_use_subcommand -a status -d 'Show the working tree status'
complete -c git -n '__fish_seen_subcommand_from status' -s v -l verbose -d 'be verbose'
complete -c git -n '__fish_seen_subcommand_from status' -s s -l short -d 'show status concisely'
complete -c git -n '__fish_seen_subcommand_from status' -s b -l branch -d 'show branch information'
complete -c git -n '__fish_seen_subcommand_from status' -l show-stash -d 'show stash information'
complete -c git -n '__fish_seen_subcommand_from status' -l ahead-behind -d 'compute full ahead/behind values'
complete -c git -n '__fish_seen_subcommand_from status' -l long -d 'show status in long format (default)'
complete -c git -n '__fish_seen_subcommand_from status' -s z -l null -d 'terminate entries with NUL'
complete -c git -n '__fish_seen_subcommand_from status' -l no-renames -d 'do not detect renames'
complete -f -c git -n __fish_use_subcommand -a submodule -d 'Initialize, update or inspect submodules'
complete -f -c git -n __fish_use_subcommand -a switch -d 'Switch branches'
complete -c git -n '__fish_seen_subcommand_from switch' -s c -l create -d '<branch>'
complete -c git -n '__fish_seen_subcommand_from switch' -s C -l force-create -d '<branch>'
complete -c git -n '__fish_seen_subcommand_from switch' -l guess -d second\ guess\ \'git\ switch\ \<no-such-branch\>\'
complete -c git -n '__fish_seen_subcommand_from switch' -l discard-changes -d 'throw away local modifications'
complete -c git -n '__fish_seen_subcommand_from switch' -s q -l quiet -d 'suppress progress reporting'
complete -c git -n '__fish_seen_subcommand_from switch' -l progress -d 'force progress reporting'
complete -c git -n '__fish_seen_subcommand_from switch' -s m -l merge -d 'perform a 3-way merge with the new branch'
complete -c git -n '__fish_seen_subcommand_from switch' -l conflict -d '<style>    conflict style (merge or diff3)'
complete -c git -n '__fish_seen_subcommand_from switch' -s d -l detach -d 'detach HEAD at named commit'
complete -c git -n '__fish_seen_subcommand_from switch' -s t -l track -d 'set upstream info for new branch'
complete -c git -n '__fish_seen_subcommand_from switch' -s f -l force -d 'force checkout (throw away local modifications)'
complete -c git -n '__fish_seen_subcommand_from switch' -l orphan -d '<new-branch>'
complete -c git -n '__fish_seen_subcommand_from switch' -l overwrite-ignore -d 'update ignored files (default)'
complete -f -c git -n __fish_use_subcommand -a tag -d 'Create, list, delete or verify a tag object signed with GPG'
complete -f -c git -n __fish_use_subcommand -a worktree -d 'Manage multiple working trees'
complete -f -c git -n __fish_use_subcommand -a config -d 'Get and set repository or global options'
complete -f -c git -n __fish_use_subcommand -a fast-export -d 'Git data exporter'
complete -f -c git -n __fish_use_subcommand -a fast-import -d 'Backend for fast Git data importers'
