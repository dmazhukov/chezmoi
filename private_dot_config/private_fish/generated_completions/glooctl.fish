complete -f -c glooctl -n __fish_use_subcommand -a add -d 'Adds configuration to a top-level Gloo resource.'
complete -c glooctl -n '__fish_seen_subcommand_from add' -l dry-run -d 'print kubernetes-formatted yaml rather than creating or updating a resource'
complete -c glooctl -n '__fish_seen_subcommand_from add' -s h -l help -d 'help for add'
complete -c glooctl -n '__fish_seen_subcommand_from add' -l name -d 'string         name of the resource to read or write'
complete -c glooctl -n '__fish_seen_subcommand_from add' -s n -l namespace -d 'string    namespace for reading or writing resources (default "gloo-system")'
complete -c glooctl -n '__fish_seen_subcommand_from add' -s o -l output -d 'OutputType   output format: (yaml, json, table, kube-yaml, wide) (default table)'
complete -c glooctl -n '__fish_seen_subcommand_from add' -s i -l interactive -d 'use interactive mode'
complete -f -c glooctl -n __fish_use_subcommand -a check -d 'Checks Gloo resources for errors (requires Gloo running on Kubernetes)'
complete -c glooctl -n '__fish_seen_subcommand_from check' -s h -l help -d 'help for check'
complete -c glooctl -n '__fish_seen_subcommand_from check' -s n -l namespace -d 'string   namespace for reading or writing resources (default "gloo-system")'
complete -c glooctl -n '__fish_seen_subcommand_from check' -s i -l interactive -d 'use interactive mode'
complete -f -c glooctl -n __fish_use_subcommand -a completion -d 'generate auto completion for your shell'
complete -c glooctl -n '__fish_seen_subcommand_from completion' -s h -l help -d 'help for completion'
complete -c glooctl -n '__fish_seen_subcommand_from completion' -s i -l interactive -d 'use interactive mode'
complete -f -c glooctl -n __fish_use_subcommand -a create -d 'Create a Gloo resource'
complete -c glooctl -n '__fish_seen_subcommand_from create' -l dry-run -d 'print kubernetes-formatted yaml rather than creating or updating a resource'
complete -c glooctl -n '__fish_seen_subcommand_from create' -s f -l file -d 'string         file to be read or written to'
complete -c glooctl -n '__fish_seen_subcommand_from create' -s h -l help -d 'help for create'
complete -c glooctl -n '__fish_seen_subcommand_from create' -l name -d 'string         name of the resource to read or write'
complete -c glooctl -n '__fish_seen_subcommand_from create' -s n -l namespace -d 'string    namespace for reading or writing resources (default "gloo-system")'
complete -c glooctl -n '__fish_seen_subcommand_from create' -s o -l output -d 'OutputType   output format: (yaml, json, table, kube-yaml, wide) (default table)'
complete -c glooctl -n '__fish_seen_subcommand_from create' -s i -l interactive -d 'use interactive mode'
complete -f -c glooctl -n __fish_use_subcommand -a delete -d 'Delete a Gloo resource'
complete -c glooctl -n '__fish_seen_subcommand_from delete' -s h -l help -d 'help for delete'
complete -c glooctl -n '__fish_seen_subcommand_from delete' -l name -d 'string        name of the resource to read or write'
complete -c glooctl -n '__fish_seen_subcommand_from delete' -s n -l namespace -d 'string   namespace for reading or writing resources (default "gloo-system")'
complete -c glooctl -n '__fish_seen_subcommand_from delete' -s i -l interactive -d 'use interactive mode'
complete -f -c glooctl -n __fish_use_subcommand -a edit -d 'Edit a Gloo resource'
complete -c glooctl -n '__fish_seen_subcommand_from edit' -s h -l help -d 'help for edit'
complete -c glooctl -n '__fish_seen_subcommand_from edit' -l name -d 'string               name of the resource to read or write'
complete -c glooctl -n '__fish_seen_subcommand_from edit' -s n -l namespace -d 'string          namespace for reading or writing resources (default "gloo-system")'
complete -c glooctl -n '__fish_seen_subcommand_from edit' -s o -l output -d 'OutputType         output format: (yaml, json, table, kube-yaml, wide) (default table)'
complete -c glooctl -n '__fish_seen_subcommand_from edit' -l resource-version -d 'string   the resource version of the resource we are editing. if not empty, resource will only be changed if the resource version matches'
complete -c glooctl -n '__fish_seen_subcommand_from edit' -s i -l interactive -d 'use interactive mode'
complete -f -c glooctl -n __fish_use_subcommand -a get -d 'Display one or a list of Gloo resources'
complete -c glooctl -n '__fish_seen_subcommand_from get' -s h -l help -d 'help for get'
complete -c glooctl -n '__fish_seen_subcommand_from get' -l name -d 'string         name of the resource to read or write'
complete -c glooctl -n '__fish_seen_subcommand_from get' -s n -l namespace -d 'string    namespace for reading or writing resources (default "gloo-system")'
complete -c glooctl -n '__fish_seen_subcommand_from get' -s o -l output -d 'OutputType   output format: (yaml, json, table, kube-yaml, wide) (default table)'
complete -c glooctl -n '__fish_seen_subcommand_from get' -s i -l interactive -d 'use interactive mode'
complete -f -c glooctl -n __fish_use_subcommand -a install -d 'install gloo on different platforms'
complete -c glooctl -n '__fish_seen_subcommand_from install' -s h -l help -d 'help for install'
complete -c glooctl -n '__fish_seen_subcommand_from install' -s v -l verbose -d 'If true, output from kubectl commands will print to stdout/stderr'
complete -c glooctl -n '__fish_seen_subcommand_from install' -s i -l interactive -d 'use interactive mode'
complete -f -c glooctl -n __fish_use_subcommand -a proxy -d 'interact with proxy instances managed by Gloo'
complete -c glooctl -n '__fish_seen_subcommand_from proxy' -s h -l help -d 'help for proxy'
complete -c glooctl -n '__fish_seen_subcommand_from proxy' -l name -d 'string        the name of the proxy service/deployment to use (default "gateway-proxy-v2")'
complete -c glooctl -n '__fish_seen_subcommand_from proxy' -s n -l namespace -d 'string   namespace for reading or writing resources (default "gloo-system")'
complete -c glooctl -n '__fish_seen_subcommand_from proxy' -l port -d 'string        the name of the service port to connect to (default "http")'
complete -c glooctl -n '__fish_seen_subcommand_from proxy' -s i -l interactive -d 'use interactive mode'
complete -f -c glooctl -n __fish_use_subcommand -a remove -d 'remove configuration items from a top-level Gloo resource'
complete -c glooctl -n '__fish_seen_subcommand_from remove' -s h -l help -d 'help for remove'
complete -c glooctl -n '__fish_seen_subcommand_from remove' -l name -d 'string        name of the resource to read or write'
complete -c glooctl -n '__fish_seen_subcommand_from remove' -s n -l namespace -d 'string   namespace for reading or writing resources (default "gloo-system")'
complete -c glooctl -n '__fish_seen_subcommand_from remove' -s i -l interactive -d 'use interactive mode'
complete -f -c glooctl -n __fish_use_subcommand -a uninstall -d 'uninstall gloo'
complete -c glooctl -n '__fish_seen_subcommand_from uninstall' -l all -d 'Deletes all gloo resources, including the namespace, crds, and cluster role'
complete -c glooctl -n '__fish_seen_subcommand_from uninstall' -l delete-crds -d 'Delete all gloo crds (all custom gloo objects will be deleted)'
complete -c glooctl -n '__fish_seen_subcommand_from uninstall' -l delete-namespace -d 'Delete the namespace (all objects written to this namespace will be deleted)'
complete -c glooctl -n '__fish_seen_subcommand_from uninstall' -s h -l help -d 'help for uninstall'
complete -c glooctl -n '__fish_seen_subcommand_from uninstall' -s n -l namespace -d 'string   namespace in which Gloo is installed (default "gloo-system")'
complete -c glooctl -n '__fish_seen_subcommand_from uninstall' -s v -l verbose -d 'If true, output from kubectl commands will print to stdout/stderr'
complete -c glooctl -n '__fish_seen_subcommand_from uninstall' -s i -l interactive -d 'use interactive mode'
complete -f -c glooctl -n __fish_use_subcommand -a upgrade -d 'upgrade glooctl binary'
complete -c glooctl -n '__fish_seen_subcommand_from upgrade' -s h -l help -d 'help for upgrade'
complete -c glooctl -n '__fish_seen_subcommand_from upgrade' -l path -d 'string      Desired path for your upgraded glooctl binary. Defaults to the location of your currently executing binary.'
complete -c glooctl -n '__fish_seen_subcommand_from upgrade' -l release -d 'string   Which glooctl release to download. Specify a git tag corresponding to the desired version of glooctl. (default "latest")'
complete -c glooctl -n '__fish_seen_subcommand_from upgrade' -s i -l interactive -d 'use interactive mode'
complete -c glooctl -s h -l help -d 'help for glooctl'
complete -c glooctl -s i -l interactive -d 'use interactive mode'
complete -c glooctl -n __fish_no_arguments -l version -d 'version for glooctl'
