complete -f -c dive -n __fish_use_subcommand -a build -d 'Builds and analyzes a docker image from a Dockerfile (this is a thin wrapper for the `docker build` command).'
complete -c dive -n '__fish_seen_subcommand_from build' -l add-host -d 'list           Add a custom host-to-IP mapping (host:ip)'
complete -c dive -n '__fish_seen_subcommand_from build' -l build-arg -d 'list          Set build-time variables'
complete -c dive -n '__fish_seen_subcommand_from build' -l cache-from -d 'strings      Images to consider as cache sources'
complete -c dive -n '__fish_seen_subcommand_from build' -l cgroup-parent -d 'string    Optional parent cgroup for the container'
complete -c dive -n '__fish_seen_subcommand_from build' -l compress -d 'Compress the build context using gzip'
complete -c dive -n '__fish_seen_subcommand_from build' -l cpu-period -d 'int          Limit the CPU CFS (Completely Fair'
complete -c dive -n '__fish_seen_subcommand_from build' -l cpu-quota -d 'int           Limit the CPU CFS (Completely Fair'
complete -c dive -n '__fish_seen_subcommand_from build' -s c -l cpu-shares -d 'int          CPU shares (relative weight)'
complete -c dive -n '__fish_seen_subcommand_from build' -l cpuset-cpus -d 'string      CPUs in which to allow execution (0-3, 0,1)'
complete -c dive -n '__fish_seen_subcommand_from build' -l cpuset-mems -d 'string      MEMs in which to allow execution (0-3, 0,1)'
complete -c dive -n '__fish_seen_subcommand_from build' -l disable-content-trust -d 'Skip image verification (default true)'
complete -c dive -n '__fish_seen_subcommand_from build' -s f -l file -d 'string             Name of the Dockerfile (Default is'
complete -c dive -n '__fish_seen_subcommand_from build' -l force-rm -d 'Always remove intermediate containers'
complete -c dive -n '__fish_seen_subcommand_from build' -l iidfile -d 'string          Write the image ID to the file'
complete -c dive -n '__fish_seen_subcommand_from build' -l isolation -d 'string        Container isolation technology'
complete -c dive -n '__fish_seen_subcommand_from build' -l label -d 'list              Set metadata for an image'
complete -c dive -n '__fish_seen_subcommand_from build' -s m -l memory -d 'bytes            Memory limit'
complete -c dive -n '__fish_seen_subcommand_from build' -l memory-swap -d 'bytes       Swap limit equal to memory plus swap:'
complete -c dive -n '__fish_seen_subcommand_from build' -l network -d 'string          Set the networking mode for the RUN'
complete -c dive -n '__fish_seen_subcommand_from build' -l no-cache -d 'Do not use cache when building the image'
complete -c dive -n '__fish_seen_subcommand_from build' -l platform -d 'string         Set platform if server is multi-platform'
complete -c dive -n '__fish_seen_subcommand_from build' -l pull -d 'Always attempt to pull a newer version of'
complete -c dive -n '__fish_seen_subcommand_from build' -s q -l quiet -d 'Suppress the build output and print image'
complete -c dive -n '__fish_seen_subcommand_from build' -l rm -d 'Remove intermediate containers after a'
complete -c dive -n '__fish_seen_subcommand_from build' -l security-opt -d 'strings    Security options'
complete -c dive -n '__fish_seen_subcommand_from build' -l shm-size -d 'bytes          Size of /dev/shm'
complete -c dive -n '__fish_seen_subcommand_from build' -l squash -d 'Squash newly built layers into a single'
complete -c dive -n '__fish_seen_subcommand_from build' -l stream -d 'Stream attaches to server to negotiate'
complete -c dive -n '__fish_seen_subcommand_from build' -s t -l tag -d 'list                Name and optionally a tag in the'
complete -c dive -n '__fish_seen_subcommand_from build' -l target -d 'string           Set the target build stage to build.'
complete -c dive -n '__fish_seen_subcommand_from build' -l ulimit -d 'ulimit           Ulimit options (default [])'
complete -f -c dive -n __fish_use_subcommand -a version -d 'print the version number and exit (also --version)'
complete -c dive -n '__fish_seen_subcommand_from version' -s h -l help -d 'help for version'
complete -c dive -n '__fish_seen_subcommand_from version' -l config -d 'string   config file (default is $HOME/.dive.yaml, ~/.config/dive/*.yaml, or $XDG_CONFIG_HOME/dive.yaml)'
complete -c dive -n __fish_no_arguments -s v -l version -d 'display version number'
complete -c dive -l ci-config -d 'string   If CI=true in the environment, use the given yaml to drive validation rules. (default ".dive-ci")'
complete -c dive -l config -d 'string      config file (default is $HOME/.dive.yaml, ~/.config/dive/*.yaml, or $XDG_CONFIG_HOME/dive.yaml)'
complete -c dive -s h -l help -d 'help for dive'
complete -c dive -s j -l json -d 'string        Skip the interactive TUI and write the layer analysis statistics to a given file.'
complete -c dive -n __fish_no_arguments -s v -l version -d 'display version number'
